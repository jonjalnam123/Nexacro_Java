<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Form_Script" width="1280" height="720" titletext="New Form">
    <Layouts>
      <Layout height="720" width="1280"/>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
* 개발 표준화 작업
* @MenuPath		샘플 > script 표준
* @FileName		sampleScript.xfdl
* @Creator 		홍길동
* @CreateDate 	2022.06.01
* @Desction 	스크립트 표준 및 주석 표준 정의
************** 소스 수정 이력 ***********************************************
* date								 ModiFier				Description
********************************************************************************
* 2022.06.01			홍길동				    최초 생성
* 2022.06.02			이순신					주석 정비
********************************************************************************
*/

/********************************************************************************
 *	include	영역(업무화면에서 꼭 필요한 경우에만 사용하세요)
 ********************************************************************************/
 //include "lib::libCpmmon.xjs";
 
/********************************************************************************
 * FORM 변수 선언 영역
 ********************************************************************************/
 this.fvTest = "aaa"; // form변수 sample
 
/********************************************************************************
 *	FROM EVENT 영역(onload, onbeforeclose)
 ********************************************************************************/
/*
 * @description 화면 onload시 처리내역(필수)
*/
  this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	this.gfnFormOnLoad(this);
}

/**
 * @description 화면 닫힐 때 변경사항 체크(입력 화면에서 변경되는 Dataset 체크 필요, 선택)
 * @return {boolean} true(화면 닫음) / false(화면 닫지 않음)
*/
 this.fnclose = function()
{
	return true;
//		  if (this.gfnDsIsUpdated(this.dsList)) {
//					 return false;
//		  }
//		  else {
//					 return false;	
//		  }
};

/********************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ********************************************************************************/
/**
 * @description Transaction CallBack 함수(선택)
*/
this.fnCallback = function(svcID,errorCode,errorMsg)
{

	 //에러 시 화면 처리 내역
	 if(errorCode !=0)
	 {
		 return;
	 }
	 switch(svcID)
	 {
		 case "search":
			  // trace(this.dsList.saveXML());
			  break;
		 case "save":
			 // 저장 되었습니다.
			 this.gfnAlert("msg.save.success");
			 break;
	}
};

/**
 * @description Popup CallBack 함수(선택)	
*/
this.fnPopupCallback = functuon(strId, strVal)
{
	trace(" strId : " + strId + " strVal : " + strVal);
};

/********************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 ********************************************************************************/
/**
 * @description 조회
*/
this.fnSearch = function()
{
	// 조회조건 설정
	this.dsInput.setColumn(0,"id",this.gfnNvl(this.divSerch.form.edtId.value,""));
	
	var strSvcId 	= "search";
	var strSvcUrl 	= "transactionSelectTest.do";
	var inData		= "dsInput=dsInput";
	var outData 	= "dsList=dsList";
	var strArg		= "name=" + this.gfnNvl(this.divSearch.form.edtName.value,"");
	var CallBackFnc	= "fnCallbakc";
	var isAsync		 = true;
	
	this.gfnTracnsaction(strSvcId , // transaction을 구분하기 위한 svc id값
						strSvcUrl , // transaction을 요청할 주소
						inData , 	// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 	// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg,		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc,// tracnsaation의 결과를 받을 Frunction 이름
						isAsync);	// 비동기통신 여부 [생략가능]
 
};

/**
 * @description 입력
*/
this.fnAdd = function ()
{
	this.dsList.addRow();
};

/**
 * @description 삭제	
*/
this.fnDel = function()
{
	this.dsList.deleteRow(this.dsList.rowposition);
};

/**
 * @description 저장
*/
this.fnSave = function()
{
	// 변경사항 체크
	if (this.gfnDsIsUpdated(this.dsList) == false) {
		// 변경된 내역이 없습니다.
		this.gfnAlert("msg.save.nochange");
		return;
	}
	
	// Validation 체크
	this.gfnClearValidation(this.dsList);
	this.gfnSetValidation(this.dsList, "ID", "아이디", "required, length:5");
	if (this.gfnValidation(this.dsList, "U") == false) return;
	
	var strSvcUrl	= "transactionSaveTest.do";
	var idData	 	= "dsList=dsList:U";
	var outData		= "dsList=dsList";
	
	this.gfnTransaction("save", strSvcUrl, inDatam, outData);
};

/**
 * @description 엑셀	
*/
this.fnExcel = function ()
{
	
};

/**
 * @description 출력
*/
this.fnprint = function ()
{
	
};

/********************************************************************************
 * 사용자 FUNCTION 영역
 ********************************************************************************/
/**
 * @description 사용자 함수	
*/
this.fnTest = function (sMessage)
{
	trace(sMEssage);
};

/********************************************************************************
 * 각 COMPONENT 별 EVENT 영역	
 ********************************************************************************/
/*
 * @description Static 내용을 trace로 출력	
*/
this.sta03_onclick = function (obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	trace(obj.text);
};
  



 
 
 


 
 
 
 
 


 ]]></Script>
  </Form>
</FDL>
